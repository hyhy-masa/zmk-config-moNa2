#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 4 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W      &kp E     &kp R                               &kp T                                                                   &kp Y            &kp U  &lt 4 I    &kp O    &kp P
&kp A         &kp S      &kp D     &kp F                               &kp G                   &kp LS(LG(S))             &kp MINUS             &kp H            &kp J  &kp K      &kp L    &kp SQT
&kp Z         &kp X      &kp C     &kp V                               &kp B                   &kp COLON                 &kp SEMICOLON         &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_ALT  &kp LCTRL  &kp RCMD  &mt LEFT_SHIFT LANG_ZENKAKUHANKAKU  &lt_to_layer_0 1 SPACE  &lt_to_layer_0 3 ENTER    &lt_to_layer_0 1 DEL  &lt 2 BACKSPACE                             &to 5
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_1 {
            bindings = <
&kp ESCAPE    &kp LEFT_SHIFT        &mkp MB2               &mkp MB1   &mkp MB3                                    &kp KP_EQUAL  &kp F2          &kp UP_ARROW    &kp RG(S)        &kp RG(R)
&kp TAB       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HASH   &kp EXCLAMATION  &bt BT_NXT      &trans     &kp F6        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F10
&kp PLUS      &kp LESS_THAN         &kp GREATER_THAN       &trans     &trans           &bt BT_SEL 0    &trans     &trans        &trans          &trans          &trans           &kp F11
&kp LEFT_ALT  &kp LG(F)             &kp LG(X)              &kp LG(Z)  &kp LS(LG(Z))    &kp LG(Y)       &kp RG(A)  &kp ENTER                                                      &kp F12
            >;
        };

        layer_2 {
            bindings = <
&kp MINUS                   &kp BACKSPACE  &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9                                  &kp CARET         &kp AMPERSAND       &kp TILDE           &kp F4               &kp F5
&kp SLASH                   &kp DEL        &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6  &kp NUMBER_0    &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN         &kp RS(UP_ARROW)    &kp DOLLAR           &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp PERIOD     &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp EQUAL       &trans          &kp LEFT_BRACKET  &kp RS(LEFT_ARROW)  &kp RS(DOWN_ARROW)  &kp RS(RIGHT_ARROW)  &kp BACKSLASH
&trans                      &trans         &trans        &kp RS(RG(V))  &kp RG(C)     &kp RG(V)       &trans          &trans                                                                         &kp PIPE
            >;
        };

        layer_3 {
            bindings = <
&kp ESCAPE        &kp KP_NUMBER_1         &kp KP_NUMBER_2  &kp LC(KP_NUMBER_3)      &trans                     &kp RA(E)  &trans                    &trans                     &trans  &trans
&kp HOME          &kp LEFT_ARROW          &kp DOWN_ARROW   &kp RIGHT_ARROW          &kp END  &trans    &trans  &kp RA(W)  &kp RS(RG(LEFT_BRACKET))  &kp RS(RG(RIGHT_BRACKET))  &trans  &trans
&kp LEFT_SHIFT    &kp LG(LS(LEFT_ARROW))  &trans           &kp LG(LS(RIGHT_ARROW))  &trans   &trans    &trans  &kp RG(W)  &kp RG(LEFT_BRACKET)      &kp RG(RIGHT_BRACKET)      &trans  &trans
&kp INT_MUHENKAN  &kp INT_HENKAN          &trans           &trans                   &trans   &trans    &trans  &trans                                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };

        layer_5 {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5                       &kp N6     &kp N7            &kp NUMBER_8  &kp N9         &kp N0
&trans  &trans  &trans  &trans  &trans  &trans    &kp RA(E)  &kp RA(W)  &kp RS(RG(LBKT))  &kp RG(RBKT)  &kp RS(RG(T))  &kp N4
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &kp RG(W)  &kp RG(LBKT)      &kp RG(RBKT)  &kp RG(RS(T))  &kp RIGHT_SHIFT
&kp N   &kp R   &kp R   &kp W   &kp R   &kp R     &kp R      &kp R                                                     &kp BSPC
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
